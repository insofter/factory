Introduction

It may be very handy to be able to connect to cattus via ssl without providing password each time the connectin is made. For example buildroot build process connects to the remote server several times in order to fech dependent packages from git repositiries, and watching the console in order to enter the password each time it is required seems akward.

The recommended solution described here uses public key authentication and ssh-agent.
Setup

First generate a pair of keys:

$ ssh-keygen -t rsa

Generating public/private rsa key pair.
Enter file in which to save the key (/home/insofter/.ssh/id_rsa): /home/insofter/.ssh/cattus_rsa
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/insofter/.ssh/cattus_rsa.
Your public key has been saved in /home/insofter/.ssh/cattus_rsa.pub.
The key fingerprint is:
31:b7:c5:c1:c4:94:29:c4:dc:88:41:f4:25:b8:6c:69 insofter@ubuntu
The key's randomart image is:
+--[ RSA 2048]----+
|       o+BoB=o   |
|        o.=+*.   |
|       .ooo.o    |
|        E+ o     |
|       oS .      |
|                 |
|                 |
|                 |
|                 |
+-----------------+

Don't leave the passphase empty as this is insecure. In order not to be prompted for the passphase each time a connection is made we will use ssh-agent.

Copy the public key onto the server:

$ ssh-copy-id -i ~/.ssh/cattus_rsa.pub trozensztrauch@cattus.info

Usage

Now, when you start you work with cattus run the following commands:

$ ssh-agent
$ ssh-add ~/.ssh/cattus_rsa

ssh-add will propmt you for the passphase, but once you enter it, you won't be bothered any more, or more precisely, until you close your console.

Test if it works, you should not be propted for a password or passphase:

$ ssh trozensztrauch@cattus.info

